install.packages('Matrix')
install.packages('copula')
library('copula')
data <- readRDS('./Copula_Test/var_10.rds')
names(data)
data
head(data)
plot(data$predictor,data$output,main = 'predictor vs output', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
pred_out <- cbind(data$predictor,data$output)
e_cop <-pobs(pred_out)
plot(e_cop[,1],e_cop[,2],pch = 21,main ="pobs(Predictor vs Outpur) ",col = "blue")
#Normal copula
normal_copula<-normalCopula(param=0.9,dim=2)
#Student copula
t_copula <-ellipCopula(family = "t",param = 1,dim = 2)
#Frank copula
Frank_copula<-frankCopula(param=6,dim=2)
#previous 2, 6
#Clayton
Clayton_copula<-claytonCopula(param=7,dim=2)
#gaussian
my_hist3d <- function(x, y, freq, nclass="auto") {
n<-length(x)
if (nclass == "auto") { nclass<-ceiling(sqrt(nclass.Sturges(x))) }
breaks.x <- seq(min(x),max(x),length=(nclass+1))
breaks.y <- seq(min(y),max(y),length=(nclass+1))
h <- NULL
for (i in 1:nclass)
for (j in 1:nclass)
h <- c(h, sum(x <= breaks.x[j+1] & x >= breaks.x[j] & y <= breaks.y[i+1] & y >= breaks.y[i] ) )
dim(h) <- c(nclass,nclass)
return (list(breaks.x = breaks.x[-1],breaks.y= breaks.y[-1],h = h))
}
my_hist <- my_hist3d(e_cop[,1],e_cop[,2], freq=FALSE,nclass = 10)
persp(my_hist$breaks.x,my_hist$breaks.y,my_hist$h,theta = 10)
Gaussian.Copula.Object<-normalCopula(param=0.9,dim=2)
Gaussian.Copula.fit<-fitCopula(Gaussian.Copula.Object,
e_cop,
method = "ml",
optim.control = list(maxit=1000))
parameters <- Gaussian.Copula.fit@copula@parameters
parameters
#student
student.cop <- ellipCopula(family = "t",param = 1,dim = 2)
t.Copula.fit<-fitCopula(student.cop,
e_cop,
method = "ml",
optim.control = list(maxit=1000))
parameters <- t.Copula.fit@copula@parameters
parameters
#frank
Frank.Copula.fit<-fitCopula(Frank_copula,
e_cop,
method = "ml",
optim.control = list(maxit=1000))
parameters <- Frank.Copula.fit@copula@parameters
parameters
#clayton
Clayton.Copula.fit<-fitCopula(Clayton_copula,
e_cop,
method = "ml",
optim.control = list(maxit=1000))
parameters <- Clayton.Copula.fit@copula@parameters
parameters
t.Copula.fit@loglik
Gaussian.Copula.fit@loglik
Frank.Copula.fit@loglik
Clayton.Copula.fit@loglik
best_parameters <- parameters
persp(Clayton_copula, dCopula, main="pdf",xlab="u", ylab="v", zlab="c(u,v)")
contour(Clayton_copula,dCopula, main="pdf",xlab="u", ylab="v")
predictor.copula <- pnorm(data$predictor,mean =  data$predictor_DistrParameters[1],sd=data$predictor_DistrParameters[2])
output.copula <- pexp(data$output,rate = data$output_DistrParameters[2])
plot(predictor.copula,output.copula,main = 'predictor vs output. Marginal Distribution Copula', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
quantileLevel <- function(numCopula,copula, theta,alpha)
{
if (numCopula == 1)
{
#Gaussian
q <- pnorm(qnorm(alpha) *sqrt(1-theta*theta)  + theta* qnorm(copula[,1]))
}
if (numCopula == 2)
{
#Student
}
if (numCopula == 3)
{
#Frank
q <- (-1/theta)*log(1 - alpha*(1 - exp(-theta))/(exp(-theta*copula[,1]) + alpha*(1 - exp(-theta*copula[,1]))))
}
if (numCopula == 4)
{
#Clayton
}
return(q)
}
copula <- cbind(predictor.copula,output.copula)
alpha <- 0.95
copulanum <- 3
parameters <- Frank.Copula.fit@copula@parameters
quantile <- quantileLevel(copulanum,copula, parameters,alpha)
(anomalindex <- which(copula[,2]>quantile))
plot(copula[,1],copula[,2],pch =20,col = "blue",main = "quatile level 95%")
points(copula[,1],quantile,col = "green",pch = 20)
points(copula[anomalindex,1],copula[anomalindex,2],col = "magenta",pch = 20)
anomal_predictor <- data$predictor[anomalindex]
anomal_output    <- data$output[anomalindex]
head(anomal_predictor)
plot(pred_out[,1],pred_out[,2],pch = 21,col= "blue",main ="Ruble vs Brent.Rates.Anomalies")
points(pred_out[anomalindex,1],pred_out[anomalindex,2],pch = 21,col= "magenta")
variant <- 10
copulaNames <- c("normal", "student", "clayton","frank")
copulaName <-copulaNames[3]
copulaName
myResult <- list(variant = variant,
copulaName = copulaName,
predictor.copula = predictor.copula,
output.copula = output.copula,
best_parameters = best_parameters,
anomal_predictor= anomal_predictor,
anomal_output= anomal_output)
myResult
saveRDS(myResult,"result.rds")
РђРЅС‚РѕРЅ Р’РёРєС‚РѕСЂРѕРІ, Р’Р°СЂРёР°РЅС‚ 5
```{r}
library(copula)
library(copula)
data <- readRDS('./Copula_Test/var_10.rds')
library(copula)
data <- readRDS('./8 - Copula/Copula_Test/var_10.rds')
data_copy <- data
names(data)
plot(data$predictor,data$output,main = 'predictor vs output', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
e_cop <-pobs(cbind(data$predictor,data$output))
plot(e_cop[,1],e_cop[,2],pch = 20,main ="empiric copula",col = "green", xlab = 'predictor', ylab = 'output')
#Normal copula
normal_copula<-normalCopula(param=0,dim=2)
#Student copula
Clayton_copula <-ellipCopula(family = "t",param = 0,dim = 2)
#Frank copula
Frank_copula<-frankCopula(param=5,dim=2)
#Clayton
Clayton_copula<-claytonCopula(param=5,dim=2)
myFitCopula <- function(Clayton_copula,data,method = 'ml'){
tryCatch(#РЎecuting more than one expression you need curly braces.
{
y = fitCopula(Clayton_copula,data,method)
return(y)
},
error=function(error_message) {
return(NA)
}
)
}
clayton_fit<-myFitCopula(Clayton_copula,pobs(cbind(data_copy$predictor,data_copy$output)),"ml")
if (is.na(clayton_fit)) {
СЃlayton_loglik <- 0
clayton_parameters <- 4
}   else {
clayton_loglik <-clayton_fit@loglik
clayton_parameters <- clayton_fit@copula@parameters
}
clayton_fit
data_fit <- cbind(data_copy$predictor,data_copy$output)
fitCopula(normal_copula,pobs(data_fit),method='ml')
data_fit <- cbind(data_copy$predictor,data_copy$output)
fitCopula(t_copula,pobs(data_fit),method='ml')
data_fit <- cbind(data_copy$predictor,data_copy$output)
fitCopula(Frank_copula,pobs(data_fit),method='ml')
cpl <- fitCopula(Clayton_copula,pobs(data_fit),method='ml')
best_parameters <- cpl@copula@parameters
best_parameters
Clayton_copula@parameters <- best_parameters
persp(Clayton_copula, dCopula, main="Estimated Student copula",xlab="u", ylab="v", zlab="c(u,v)")
Simulated.studentCopula<-rCopula(5000,Clayton_copula)
SimulatedN<-length(Simulated.studentCopula[,1])
plot(Simulated.studentCopula,main="Simulated Student Copula",xlab="Variable 1",ylab="Variable 2")
data$predictor_DistrType
data$predictor_DistrParameters
data$output_DistrType
data$output_DistrParameters
predictor.copula <- pgamma(data$predictor,shape=data$predictor_DistrParameters[1],rate=data$predictor_DistrParameters[2])
output.copula <- plogis(data$output,location=data$output_DistrParameters[1], scale=data$output_DistrParameters[2])
plot(predictor.copula,output.copula,main = 'predictor vs output. Marginal Distribution Copula', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
quantileLevel <- function(numCopula,copula, theta,alpha)
{
if (numCopula == 1)
{
#Gaussian
q <- pnorm(qnorm(alpha) *sqrt(1-theta*theta)  + theta* qnorm(copula[,1]))
}
if (numCopula == 2)
{
nu <- theta[2]
mn <- theta[1]
k <- sqrt(
(nu + (qt(copula[,1], df=nu) ^ 2)) * (1 - mn ^ 2) /
(nu + 1)
)
q <- pt(qt(alpha, nu + 1) * k + mn * qt(copula[,1], df=nu), df=nu)
#Student
}
if (numCopula == 3)
{
q <- -1 / theta * log(1 - (alpha * (1 - exp(-theta)))/(exp(-theta * copula[,1]) + alpha(1 - exp(-theta * copula[,1]))))
#Frank
}
if (numCopula == 4)
{
q <- ((alpha ^ (-theta / (1 + theta)) - 1) * copula[,1] ^ (-theta) + 1) ^ (-1/theta)
#Clayton
}
return(q)
}
copula <- cbind(predictor.copula,output.copula)
alpha <- 0.95
quantile <- quantileLevel(2,copula, best_parameters,alpha)
(anomalindex <- which(copula[,2]>quantile))
plot(copula[,1],copula[,2],pch =20,col = "blue",main = "quatile level 95%")
points(copula[,1],quantile,col = "green",pch = 20)
points(copula[anomalindex,1],copula[anomalindex,2],col = "magenta",pch = 20)
plot(copula[,1],copula[,2],pch =20,col = "blue",main = "quatile level 95%")
points(copula[,1],quantile,col = "green",pch = 20)
points(copula[anomalindex,1],copula[anomalindex,2],col = "magenta",pch = 20)
plot(data$predictor,data$output,main = 'Anomal predictor and output', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
points(data$predictor[anomalindex],data$output[anomalindex],col = "magenta",pch = 20)
copulanum <- 3
variant <- 10
copulaNames <- c("normal", "student", "clayton","frank")
copulaName <-copulaNames[copulanum]
copulaName
anomal_predictor <- data$predictor[anomalindex]
anomal_output <- data$output[anomalindex]
myResult <- list(variant = variant,
copulaName = copulaName,
predictor.copula = predictor.copula,
output.copula = output.copula,
best_parameters = best_parameters,
anomal_predictor= anomal_predictor,
anomal_output= anomal_output)
saveRDS(myResult,"result.rds")
knitr::opts_chunk$set(echo = TRUE)
library(copula)
library(latticeExtra)
library("SciViews")
data <- readRDS('./8 - Copula/Copula_Test/var_10.rds')
names(data)
print(data['predictor_DistrType'])
print(data['predictor_DistrParameters'])
print(data['output_DistrType'])
print(data['output_DistrParameters'])
plot(data$predictor,data$output,main = 'predictor vs output', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
predictor_output <- cbind(data$predictor,data$output)
e_cop <-pobs(predictor_output)
plot(e_cop[,1],e_cop[,2],pch = 21,main ="pobs(predictor vs output) ",col = "blue")
#Normal copula
normal_copula<-normalCopula(param=0,dim=2)
#Student copula
t_copula <-ellipCopula(family = "t",param = 0,dim = 2)
#Frank copula
Frank_copula<-frankCopula(param=5,dim=2)
#Clayton
Clayton_copula<-claytonCopula(param=5,dim=2)
Gaussian.Copula.fit<-fitCopula(normal_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Gaussian.Copula.fit@copula@parameters
parameters
Student.Copula.fit<-fitCopula(t_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Student.Copula.fit@copula@parameters
parameters
Frank.Copula.fit<-fitCopula(Frank_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Frank.Copula.fit@copula@parameters
parameters
Clayton.Copula.fit<-fitCopula(Clayton_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Clayton.Copula.fit@copula@parameters
parameters
Gaussian.Copula.fit@loglik
Student.Copula.fit@loglik
Frank.Copula.fit@loglik
Clayton.Copula.fit@loglik
parameters <- Clayton.Copula.fit@copula@parameters
(best_parameters <- parameters)
persp(Clayton_copula, dCopula, main="pdf",xlab="u", ylab="v", zlab="c(u,v)")
contour(Clayton_copula,dCopula, main="pdf",xlab="u", ylab="v")
predictor.copula <- pexp(data$predictor,rate = data$predictor_DistrParameters[2])
output.copula <- plogis(data$output, location = data$output_DistrParameters[1], scale=data$output_DistrParameters[2])
data$output_DistrParameters[2]
plot(predictor.copula,output.copula,main = 'predictor vs output. Marginal Distribution Copula', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
quantileLevel <- function(numCopula,copula, theta,alpha)
{
if (numCopula == 1)
{
#Gaussian
q <- pnorm(qnorm(alpha) *sqrt(1-theta*theta)  + theta* qnorm(copula[,1]))
}
if (numCopula == 2)
{
#Student
}
if (numCopula == 3)
{
#Frank
q <- -(1/theta) * ln(1 - (alpha*(1 - exp(-theta)))/(exp(-theta*copula[,1]) + alpha*(1-exp(-theta*copula[,1]))))
}
if (numCopula == 4)
{
#Clayton
}
return(q)
}
copula <- cbind(predictor.copula,output.copula)
alpha <- 0.95
copulanum <- 3
parameters <- Clayton.Copula.fit@copula@parameters
quantile <- quantileLevel(copulanum,copula, parameters,alpha)
(anomalindex <- which(copula[,2]>quantile))
plot(copula[,1],copula[,2],pch =20,col = "blue",main = "quatile level 95%")
points(copula[,1],quantile,col = "green",pch = 20)
points(copula[anomalindex,1],copula[anomalindex,2],col = "magenta",pch = 20)
anomal_predictor <- data$predictor[anomalindex]
anomal_output    <- data$output[anomalindex]
head(anomal_predictor)
head(anomal_output)
plot(predictor_output[,1], predictor_output[,2],pch = 21,col= "blue",main ="Predictors vs Output.Anomalies")
points(anomal_predictor, anomal_output,pch = 21,col= "magenta")
variant <- 10
copulaNames <- c("normal", "student","frank", "clayton")
copulaName <-copulaNames[copulanum]
copulaName
myResult <- list(variant = variant,
copulaName = copulaName,
predictor.copula = predictor.copula,
output.copula = output.copula,
best_parameters = best_parameters,
anomal_predictor= anomal_predictor,
anomal_output= anomal_output)
saveRDS(myResult,"result.rds")
knitr::opts_chunk$set(echo = TRUE)
library(copula)
library(latticeExtra)
library("SciViews")
data <- readRDS('./8 - Copula/Copula_Test/var_10.rds')
names(data)
print(data['predictor_DistrType'])
print(data['predictor_DistrParameters'])
print(data['output_DistrType'])
print(data['output_DistrParameters'])
plot(data$predictor,data$output,main = 'predictor vs output', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
predictor_output <- cbind(data$predictor,data$output)
e_cop <-pobs(predictor_output)
plot(e_cop[,1],e_cop[,2],pch = 21,main ="pobs(predictor vs output) ",col = "blue")
#Normal copula
normal_copula<-normalCopula(param=0,dim=2)
#Student copula
t_copula <-ellipCopula(family = "t",param = 0,dim = 2)
#Frank copula
Frank_copula<-frankCopula(param=5,dim=2)
#Clayton
Clayton_copula<-claytonCopula(param=5,dim=2)
Gaussian.Copula.fit<-fitCopula(normal_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Gaussian.Copula.fit@copula@parameters
parameters
Student.Copula.fit<-fitCopula(t_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Student.Copula.fit@copula@parameters
parameters
Frank.Copula.fit<-fitCopula(Frank_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Frank.Copula.fit@copula@parameters
parameters
Clayton.Copula.fit<-fitCopula(Clayton_copula,
e_cop,
method = "ml",
optim.method = "BFGS",
optim.control = list(maxit=1000))
parameters <- Clayton.Copula.fit@copula@parameters
parameters
Gaussian.Copula.fit@loglik
Student.Copula.fit@loglik
Frank.Copula.fit@loglik
Clayton.Copula.fit@loglik
parameters <- Clayton.Copula.fit@copula@parameters
(best_parameters <- parameters)
persp(Clayton_copula, dCopula, main="pdf",xlab="u", ylab="v", zlab="c(u,v)")
contour(Clayton_copula,dCopula, main="pdf",xlab="u", ylab="v")
predictor.copula <- pexp(data$predictor,rate = data$predictor_DistrParameters[2])
output.copula <- plogis(data$output, location = data$output_DistrParameters[1], scale=data$output_DistrParameters[2])
data$output_DistrParameters[2]
plot(predictor.copula,output.copula,main = 'predictor vs output. Marginal Distribution Copula', col = 'green',pch = 20,xlab = 'predictor', ylab = 'output')
quantileLevel <- function(numCopula,copula, theta,alpha)
{
if (numCopula == 1)
{
#Gaussian
q <- pnorm(qnorm(alpha) *sqrt(1-theta*theta)  + theta* qnorm(copula[,1]))
}
if (numCopula == 2)
{
#Student
}
if (numCopula == 3)
{
#Frank
q <- -(1/theta) * ln(1 - (alpha*(1 - exp(-theta)))/(exp(-theta*copula[,1]) + alpha*(1-exp(-theta*copula[,1]))))
}
if (numCopula == 4)
{
#Clayton
}
return(q)
}
copula <- cbind(predictor.copula,output.copula)
alpha <- 0.95
copulanum <- 3
parameters <- Clayton.Copula.fit@copula@parameters
quantile <- quantileLevel(copulanum,copula, parameters,alpha)
(anomalindex <- which(copula[,2]>quantile))
plot(copula[,1],copula[,2],pch =20,col = "blue",main = "quatile level 95%")
points(copula[,1],quantile,col = "green",pch = 20)
points(copula[anomalindex,1],copula[anomalindex,2],col = "magenta",pch = 20)
anomal_predictor <- data$predictor[anomalindex]
anomal_output    <- data$output[anomalindex]
head(anomal_predictor)
head(anomal_output)
plot(predictor_output[,1], predictor_output[,2],pch = 21,col= "blue",main ="Predictors vs Output.Anomalies")
points(anomal_predictor, anomal_output,pch = 21,col= "magenta")
variant <- 10
copulanum <- 4
copulaNames <- c("normal", "student","frank", "clayton")
copulaName <-copulaNames[copulanum]
copulaName
myResult <- list(variant = variant,
copulaName = copulaName,
predictor.copula = predictor.copula,
output.copula = output.copula,
best_parameters = best_parameters,
anomal_predictor= anomal_predictor,
anomal_output= anomal_output)
saveRDS(myResult,"result.rds")
```{r}
filename='9 - Analysis of Variance/TestFiles/var_10.csv'
filename='9 - Analysis of Variance/TestFiles/var_10.csv'
Sample<- read.table(filename,header = TRUE,sep =",");
filename='./TestFiles/var_10.csv'
Sample<- read.table(filename,header = TRUE,sep =",");
Sample
Sample<-data.frame(Output=Sample$Output,Treatment=as.factor(Sample$Treatment))
Sample
g <- lm(Output ~ Treatment, Sample)
summary(g)
anova(g)
(anovag_Sum_Sq_2 <- anova(g)$"Sum Sq"[2])
(anovag_Sum_Sq_1 <- anova(g)$"Sum Sq"[1])
(anovag_PValue<- anova(g)$"Pr(>F)"[1])
gi <- lm(Output ~ Treatment -1, Sample)
summary(gi)
(anovamgi_Sum_Sq_1 <- anova(gi)$"Sum Sq"[1])
(anovagi_Sum_Sq_2<- anova(gi)$"Sum Sq"[2])
(anovagi_PValue <- anova(gi)$"Pr(>F)"[1])
